---
# python3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_20.01
galaxy_config_style: yaml
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: "4.6.14"
galaxy_job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
galaxy_config_files:
  # ... possible existing config file definitions
  - src: files/galaxy/config/job_conf.xml
    dest: "{{ galaxy_job_config_file }}"
galaxy_config_templates:
  - src: templates/galaxy/config/object_store_conf.xml
    dest: "{{ galaxy_config.galaxy.object_store_config_file }}"
  - src: templates/galaxy/config/reports.yml
    dest: "{{ galaxy_config_dir }}/reports.yml"


galaxy_config:
  galaxy:
    brand: "ATGM-fairhearth"
    admin_users: dl.vrins@student.avans.nl, fairheartgalaxy-test@fairheartgalaxy.bioinformatics-atgm.nl
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    job_config_file: "{{ galaxy_job_config_file }}"
    object_store_config_file: "{{ galaxy_config_dir }}/object_store_conf.xml"
    # External authentication, disable all when in production #
    # use_remote_user: true
    remote_user_maildomain: "{{ inventory_hostname }}"
    remote_user_secret: SOME_SECRET_STRING
    tool_data_table_config_path:
      - /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml
      - /cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    statsd_host: localhost
    statsd_influxdb: true
    # Sanitize all HTML tool output.  By default, all tool output served as 'text/html' will be saniti$
    sanitize_all_html: false
     # Force everyone to log in (disable anonymous access
    require_login: true
    show_welcome_with_login: true
#this enables users to create their own account
    allow_user_creation: true
    #allows easier sharing of data to other authenticated users
    expose_user_name: true
    expose_user_email: true

    # whitelist email registration. (only certain emails are alowed to register
    whitelist_file: /whitelist_email
     # The URL of the page to display in Galaxy's middle pane when loaded.
     # This can be an absolute or relative URL.
    welcome_url: static/welcome.html

  uwsgi:
    socket: 127.0.0.1:8080
    buffer-size: 16384
    processes: 2
#set this on when processes is higher then 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static/style={{ galaxy_server_dir }}/static/style/blue
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2
    # Sanitize all HTML tool output.  By default, all tool output served as 'text/html' will be sanitized thoroughly.  This can be disabled if you have special tools that require unaltered output.  WARNING: disabling this does make the Galaxy instance susceptible to XSS attacks initiated by your users.
    sanitize_all_html: false

# systemd
galaxy_systemd_reports: true
galaxy_systemd_mode: mule
galaxy_zergpool_listen_addr: 127.0.0.1:8080
galaxy_restart_handler_name: "Restart Galaxy"

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - nginx
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_domains:
 - "{{ inventory_hostname }}"
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_enable_default_server: false
nginx_ssl_servers:
  - galaxy
nginx_conf_http:
  client_max_body_size: 5g
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem
location: <your-website>/reports/
        uwsgi_pass           127.0.0.1:9001;
        uwsgi_param          UWSGI_SCHEME $scheme;
        include              uwsgi_params;


# Slurm environment group variable
galaxy_systemd_zergling_env: DRMAA_LIBRARY_PATH="/usr/lib/slurm-drmaa/lib/libdrmaa.so.1"

# Configuring object-store
# how it was before : minio_server_datadirs: ["/minio-test"]
#minio_server_datadirs: ["/mnt/galaxy-data"]
#minio_access_key: "my-access-key"
#minio_secret_key: "my-super-extra-top-secret-key"

# CVMFS vars
cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo
cvmfs_quota_limit: 500

# telegraf
telegraf_plugins_extra:
  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - metric_separator = "."
      - allowed_pending_messages = 10000


# Interactive Tools
#dockter install compose is wheter to instal and configure docker compose
docker_install_compose: false
#list of users who are added to the docker group
#by using galaxy_user.name we dont duplicate the values of user
docker_users:
  - "{{ galaxy_user.name }}"


